{% extends 'base.html.twig' %}

{% block title %}Nouvelle tâche - TaskFlow
{% endblock %}

{% block body %}
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-lg-8">
				<div class="card border-0 shadow-sm">
					<div class="card-header bg-success text-white">
						<h4 class="card-title mb-0">
							<i class="fas fa-plus me-2"></i>Créer une nouvelle tâche
						</h4>
					</div>
					<div class="card-body p-4">
						<p class="text-muted mb-4">
							Remplissez les informations ci-dessous pour créer votre nouvelle tâche.
						</p>

						{{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': true}}) }}

						<div class="mb-4">
							{{ form_label(form.title, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
							<div class="input-group">
								<span class="input-group-text bg-light">
									<i class="fas fa-heading text-success"></i>
								</span>
								{{ form_widget(form.title, {'attr': {'class': 'form-control', 'autofocus': 'autofocus'}}) }}
							</div>
							{{ form_errors(form.title) }}
						</div>

						<div class="mb-4">
							{{ form_label(form.description, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
							<div class="input-group">
								<span class="input-group-text bg-light align-items-start pt-3">
									<i class="fas fa-align-left text-success"></i>
								</span>
								{{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 4}}) }}
							</div>
							{{ form_errors(form.description) }}
						</div>

						<div class="row mb-4">
							<div class="col-sm-6">
								<div class="mb-4 mb-sm-0">
									{{ form_label(form.status, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
									<div class="input-group">
										<span class="input-group-text bg-light">
											<i class="fas fa-tasks text-success"></i>
										</span>
										{{ form_widget(form.status, {'attr': {'class': 'form-select'}}) }}
									</div>
									{{ form_errors(form.status) }}
								</div>
							</div>
							<div class="col-sm-6">
								<div>
									{{ form_label(form.priority, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
									<div class="input-group">
										<span class="input-group-text bg-light">
											<i class="fas fa-exclamation-triangle text-success"></i>
										</span>
										{{ form_widget(form.priority, {'attr': {'class': 'form-select'}}) }}
									</div>
									{{ form_errors(form.priority) }}
								</div>
							</div>
						</div>

						{% if form.project is defined %}
							<div class="mb-4">
								{{ form_label(form.project, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
								<div class="input-group">
									<span class="input-group-text bg-light">
										<i class="fas fa-folder text-success"></i>
									</span>
									{{ form_widget(form.project, {'attr': {'class': 'form-select', 'id': 'task_project'}}) }}
								</div>
								{{ form_errors(form.project) }}
							</div>
						{% endif %}

						<div class="mb-4">
							{{ form_label(form.assignee, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
							<div class="input-group">
								<span class="input-group-text bg-light">
									<i class="fas fa-user-circle text-primary"></i>
								</span>
								{{ form_widget(form.assignee, {'attr': {'class': 'form-select', 'id': 'task_assignee'}}) }}
							</div>
							{{ form_errors(form.assignee) }}
						</div>

						<div class="mb-4">
							{{ form_label(form.dueDate, null, {'label_attr': {'class': 'form-label fw-semibold'}}) }}
							<div class="input-group">
								<span class="input-group-text bg-light">
									<i class="fas fa-calendar-alt text-success"></i>
								</span>
								{{ form_widget(form.dueDate, {'attr': {'class': 'form-control'}}) }}
							</div>
							{{ form_errors(form.dueDate) }}
						</div>

						<div class="mt-4 pt-3 border-top">
							<div class="d-grid gap-2 d-sm-flex justify-content-sm-end">
								{% if task.project %}
									<a href="{{ path('project_show', {id: task.project.id}) }}" class="btn btn-outline-secondary">
										<i class="fas fa-times me-2"></i>Annuler
									</a>
								{% else %}
									<a href="{{ path('task_index') }}" class="btn btn-outline-secondary">
										<i class="fas fa-times me-2"></i>Annuler
									</a>
								{% endif %}
								<button type="submit" class="btn btn-success btn-lg">
									<i class="fas fa-save me-2"></i>Créer la tâche
								</button>
							</div>
						</div>

						{{ form_end(form) }}
					</div>
				</div>
			</div>
		</div>
	</div>

	<style>
		.input-group-text {
			border-right: none;
			background-color: #f8f9fa;
			border-color: #ced4da;
		}

		.form-control,
		.form-select {
			border-left: none;
		}
	</style>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
const projectSelect = document.getElementById('task_project');
const assigneeSelect = document.getElementById('task_assignee');

if (projectSelect && assigneeSelect) {
const updateAssignees = () => {
const projectId = projectSelect.value;

// Effacer les options actuelles sauf la première
assigneeSelect.innerHTML = '<option value="">Non attribuée</option>';

if (projectId) {
fetch (`/projects/api/${projectId}/collaborators`).then(response => {
if (!response.ok) {
throw new Error('Erreur réseau');
}
return response.json();
}).then(collaborators => {
collaborators.forEach(collaborator => {
const option = document.createElement('option');
option.value = collaborator.id;
option.textContent = collaborator.fullName;
assigneeSelect.appendChild(option);
});
}).catch(error => {
console.error('Erreur lors de la récupération des collaborateurs :', error);
});
}
};

// Écoute l'événement de changement sur le menu déroulant des projets
projectSelect.addEventListener('change', updateAssignees);

// Charger les collaborateurs si un projet est déjà sélectionné
if (projectSelect.value) {
updateAssignees();
}
}
});
	</script>
{% endblock %}
