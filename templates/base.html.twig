<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>
			{% block title %}TaskFlow - Gestion de tÃ¢ches collaboratives
			{% endblock %}
		</title>
		<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>ðŸ“‹</text></svg>">

		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
		<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

		{% block stylesheets %}
			<link rel="stylesheet" href="/css/app.css">
		{% endblock %}

		<style>
		/* Variables CSS personnalisÃ©es */
		:root {
			--primary-color: #3b82f6;
			--secondary-color: #64748b;
			--success-color: #10b981;
			--warning-color: #f59e0b;
			--danger-color: #ef4444;
			--light-bg: #f8fafc;
			--dark-text: #1e293b;
		}

		/* Solution pour le footer collant */
		html,
		body {
			height: 100%;
		}

		body {
			display: flex;
			flex-direction: column;
			background-color: var(--light-bg);
			color: var(--dark-text);
			font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
		}

		/* Le contenu principal doit grandir pour occuper l'espace disponible */
		.main-content {
			flex: 1;
		}

		/* Navigation */
		.navbar-brand {
			font-weight: 700;
			font-size: 1.5rem;
		}

		/* Sidebar */
		.sidebar {
			background: white;
			box-shadow: 0 0 20px rgba(0, 0, 0, 0.08);
			min-height: calc(100vh - 76px);
		}

		.sidebar .nav-link {
			color: var(--dark-text);
			padding: 0.75rem 1rem;
			border-radius: 8px;
			margin: 0.25rem 0;
			transition: all 0.2s;
		}

		.sidebar .nav-link:hover,
		.sidebar .nav-link.active {
			background-color: var(--primary-color);
			color: white;
		}

		/* Cards */
		.card {
			border: none;
			box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
			border-radius: 12px;
			transition: transform 0.2s, box-shadow 0.2s;
		}

		.card:hover {
			transform: translateY(-2px);
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
		}

		/* Boutons */
		.btn {
			border-radius: 8px;
			font-weight: 500;
			padding: 0.5rem 1rem;
		}

		.btn-primary {
			background-color: var(--primary-color);
			border-color: var(--primary-color);
		}

		/* Badges de statut */
		.badge-todo {
			background-color: var(--secondary-color);
		}
		.badge-progress {
			background-color: var(--warning-color);
		}
		.badge-completed {
			background-color: var(--success-color);
		}

		/* Badges de prioritÃ© */
		.badge-priority-low {
			background-color: #6b7280;
		}
		.badge-priority-medium {
			background-color: var(--warning-color);
		}
		.badge-priority-high {
			background-color: var(--danger-color);
		}

		/* Barres de progression */
		.progress {
			height: 8px;
			border-radius: 4px;
		}

		/* Alertes */
		.alert {
			border: none;
			border-radius: 8px;
		}

		/* Footer */
		footer {
			background: white;
			border-top: 1px solid #e2e8f0;
			margin-top: auto;
		}

		/* Animations */
		.fade-in {
			animation: fadeIn 0.5s ease-in;
		}

		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translateY(10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		/* Responsive */
		@media(max-width: 768px) {
			.sidebar {
				margin-bottom: 2rem;
			}
		}

		/* ===== STYLES AMÃ‰LIORÃ‰S POUR LA NAVIGATION ===== */
		
		/* Dimensions uniformes pour les boutons navbar */
		.navbar-toggler,
		.notification-bell-btn {
			width: 44px;
			height: 44px;
			padding: 0;
			border: none;
			background: transparent;
			display: flex;
			align-items: center;
			justify-content: center;
			border-radius: 6px;
			transition: background-color 0.2s ease;
		}

		.navbar-toggler:hover,
		.notification-bell-btn:hover {
			background-color: rgba(255, 255, 255, 0.1);
		}

		/* IcÃ´ne de la cloche avec dimensions cohÃ©rentes */
		.notification-bell-btn i {
			font-size: 1.1rem;
			color: rgba(255, 255, 255, 0.9);
		}

		/* Badge de notification unifiÃ© */
		.notification-badge {
			position: absolute;
			top: 6px;
			right: 8px; /* LÃ©gÃ¨rement dÃ©calÃ© vers la gauche */
			font-size: 0.7rem;
			min-width: 18px;
			height: 18px;
			border-radius: 9px;
			display: none;
			align-items: center;
			justify-content: center;
			padding: 0;
			border: 2px solid var(--primary-color);
		}

		/* Version desktop de la cloche */
		.notification-desktop {
			position: relative;
		}

		.notification-desktop .notification-badge {
			top: 8px;
			right: 8px;
		}

		/* Nouveaux styles pour le positionnement en version mobile */
		@media(max-width: 991.98px) {
			.navbar-header-mobile {
				display: flex;
				width: 100%;
				justify-content: space-between;
				align-items: center;
			}
			
			.navbar-header-mobile .navbar-brand {
				order: 2;
				flex-grow: 1;
				text-align: center;
			}
			
			.navbar-header-mobile .navbar-toggler-notifications {
				order: 3;
			}
			
			.navbar-header-mobile .navbar-toggler {
				order: 1;
			}
		}

		/* AmÃ©liorations pour le dropdown desktop */
		.dropdown-menu.notification-dropdown {
			min-width: 350px;
			max-height: 400px;
			overflow-y: auto;
			border: none;
			box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
			border-radius: 12px;
		}

		/* Styles pour les Ã©lÃ©ments de notification */
		.notification-item {
			padding: 12px 16px;
			border-bottom: 1px solid #f1f5f9;
			transition: background-color 0.2s ease;
		}

		.notification-item:hover {
			background-color: #f8fafc;
		}

		.notification-item:last-child {
			border-bottom: none;
		}

		.notification-item.unread {
			background-color: #f0f9ff;
			font-weight: 500;
		}
	</style>
</head>

<body>
	<nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top">
		<div class="container-fluid">
			<div class="d-flex d-lg-none navbar-header-mobile">
				<!-- Le menu burger Ã  gauche -->
				<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
					<span class="navbar-toggler-icon"></span>
				</button>
				
				<!-- Le logo centrÃ© -->
				<a class="navbar-brand" href="{{ path('app_home') }}">
					ðŸ“‹ TaskFlow
				</a>
				
				<!-- La cloche Ã  droite avec dimensions uniformes -->
				{% if app.user %}
					<div class="navbar-toggler-notifications">
						<button class="notification-bell-btn" type="button" data-bs-toggle="modal" data-bs-target="#notificationModal">
							<i class="fas fa-bell"></i>
							<span class="badge bg-danger notification-badge" id="notification-count"></span>
						</button>
					</div>
				{% endif %}
			</div>
			
			<div class="collapse navbar-collapse" id="navbarNav">
				<ul class="navbar-nav me-auto">
					{% if app.user %}
						<li class="nav-item d-lg-block d-none">
							<a class="navbar-brand" href="{{ path('app_home') }}">
								ðŸ“‹ TaskFlow
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="{{ path('app_dashboard') }}">
								<i class="fas fa-tachometer-alt"></i>
								Tableau de bord
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="{{ path('project_index') }}">
								<i class="fas fa-folder"></i>
								Mes Projets
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="{{ path('task_index') }}">
								<i class="fas fa-tasks"></i>
								Mes TÃ¢ches
							</a>
						</li>
					{% endif %}
				</ul>
				
				<ul class="navbar-nav">
					{% if app.user %}
						<li class="nav-item dropdown d-none d-lg-block notification-desktop">
							<!-- Version desktop de la cloche avec dimensions cohÃ©rentes -->
							<a class="nav-link notification-bell-btn" href="#" id="notificationDropdownDesktop" role="button" data-bs-toggle="dropdown" aria-expanded="false">
								<i class="fas fa-bell"></i>
								<span class="badge bg-danger notification-badge" id="notification-count-desktop"></span>
							</a>
							<ul class="dropdown-menu dropdown-menu-end notification-dropdown" id="notification-list-desktop" aria-labelledby="notificationDropdownDesktop">
								<li>
									<p class="text-center my-2">Chargement...</p>
								</li>
								<li><hr class="dropdown-divider"></li>
								<li>
									<a href="{{ path('notification_index') }}" class="dropdown-item text-center">
										Voir toutes les notifications
									</a>
								</li>
							</ul>
						</li>
						
						<li class="nav-item dropdown">
							<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
								<i class="fas fa-user"></i>
								{{ app.user.fullName }}
							</a>
							<ul class="dropdown-menu">
								<li>
									<a class="dropdown-item" href="{{ path('user_profile') }}">
										<i class="fas fa-user-edit"></i>
										Mon Profil
									</a>
								</li>
								{% if is_granted('ROLE_ADMIN') %}
									<li>
										<a class="dropdown-item" href="{{ path('admin_dashboard') }}">
											<i class="fas fa-cogs"></i>
											Administration
										</a>
									</li>
								{% endif %}
								<li><hr class="dropdown-divider"></li>
								<li>
									<a class="dropdown-item" href="{{ path('app_logout') }}">
										<i class="fas fa-sign-out-alt"></i>
										DÃ©connexion
									</a>
								</li>
							</ul>
						</li>
					{% else %}
						<li class="nav-item">
							<a class="nav-link" href="{{ path('app_login') }}">
								<i class="fas fa-sign-in-alt"></i>
								Connexion
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link" href="{{ path('app_register') }}">
								<i class="fas fa-user-plus"></i>
								Inscription
							</a>
						</li>
					{% endif %}
				</ul>
			</div>
		</div>
	</nav>

	<div class="main-content">
		<div class="container-fluid py-4">
			{% for type, messages in app.flashes %}
				{% for message in messages %}
					<div class="alert alert-{{ type == 'error' ? 'danger' : type }} alert-dismissible fade show" role="alert">
						<i class="fas fa-{{ type == 'success' ? 'check-circle' : (type == 'error' ? 'exclamation-triangle' : 'info-circle') }}"></i>
						{{ message }}
						<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
					</div>
				{% endfor %}
			{% endfor %}

			{% block body %}{% endblock %}
		</div>
	</div>

	<footer class="mt-5 py-4 text-center text-muted">
		<div class="container">
			<div class="row">
				<div class="col-md-6">
					<p>&copy;
						{{ 'now'|date('Y') }}
						TaskFlow - Application de gestion de tÃ¢ches</p>
				</div>
				<div class="col-md-6">
					<div class="d-flex justify-content-center gap-3">
						<a href="{{ path('legal_terms') }}" class="text-muted text-decoration-none">CGU</a>
						<a href="{{ path('legal_privacy') }}" class="text-muted text-decoration-none">ConfidentialitÃ©</a>
						<a href="{{ path('legal_gdpr') }}" class="text-muted text-decoration-none">RGPD</a>
						<a href="{{ path('legal_cookies') }}" class="text-muted text-decoration-none">Cookies</a>
					</div>
				</div>
			</div>
			<small>DÃ©veloppÃ© avec Symfony</small>
		</div>
	</footer>

	<!-- Structure de la modale de notification pour la version mobile -->
	<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="notificationModalLabel">Mes Notifications</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<!-- Le contenu sera insÃ©rÃ© par le JavaScript -->
				</div>
				<div class="modal-footer">
					<a href="{{ path('notification_index') }}" class="btn btn-outline-primary w-100">Voir toutes les notifications</a>
				</div>
			</div>
		</div>
	</div>

	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

	{% block javascripts %}
		<script>
			// Auto-hide alerts after 5 seconds
			document.addEventListener('DOMContentLoaded', function () {
				const alerts = document.querySelectorAll('.alert:not(.alert-danger)');
				alerts.forEach(function (alert) {
					setTimeout(function () {
						const bsAlert = new bootstrap.Alert(alert);
						bsAlert.close();
					}, 5000);
				});

				// --- SCRIPT POUR LES NOTIFICATIONS ---
				const notificationCountEl = document.getElementById('notification-count');
				const notificationCountElDesktop = document.getElementById('notification-count-desktop');
				const notificationListElDesktop = document.getElementById('notification-list-desktop');
				const notificationModal = document.getElementById('notificationModal');
				const notificationModalBody = document.querySelector('#notificationModal .modal-body');

				const unreadCountUrl = "{{ path('api_notification_unread_count') }}";
				const recentNotificationsUrl = "{{ path('api_notification_recent') }}?limit=5";

				// Met Ã  jour le compteur de notifications
				const updateUnreadCount = () => {
					fetch(unreadCountUrl).then(response => response.json()).then(data => {
						if (data.count > 0) {
							if (notificationCountEl) {
								notificationCountEl.innerText = data.count;
								notificationCountEl.style.display = 'flex';
							}
							if (notificationCountElDesktop) {
								notificationCountElDesktop.innerText = data.count;
								notificationCountElDesktop.style.display = 'flex';
							}
						} else {
							if (notificationCountEl) {
								notificationCountEl.style.display = 'none';
							}
							if (notificationCountElDesktop) {
								notificationCountElDesktop.style.display = 'none';
							}
						}
					});
				};

				// Charge les notifications rÃ©centes dans un conteneur donnÃ©
				const loadRecentNotifications = (containerElement, isModal = false) => {
					containerElement.innerHTML = '<p class="text-center text-muted my-4">Chargement...</p>';
					fetch(recentNotificationsUrl).then(response => response.json()).then(data => {
						containerElement.innerHTML = '';

						if (data.length === 0) {
							containerElement.innerHTML = '<p class="text-center text-muted my-4">Aucune nouvelle notification</p>';
						} else {
							const listGroup = document.createElement('div');
							listGroup.className = isModal ? 'list-group list-group-flush' : 'list-group';

							data.forEach(notif => {
								const item = document.createElement('a');
								item.href = notif.read_url;
								item.className = 'list-group-item list-group-item-action d-flex align-items-start notification-item';
								if (!notif.is_read) {
									item.classList.add('unread');
								}

								item.innerHTML = `
									<i class="${notif.icon} ${notif.color_class} mt-1 me-3"></i>
									<div>
										<div class="small">${notif.message}</div>
										<small class="text-muted">${notif.time_ago}</small>
									</div>
								`;
								listGroup.appendChild(item);
							});
							containerElement.appendChild(listGroup);
						}
						
						// RÃ©injecter le bouton "Voir toutes les notifications" uniquement pour desktop
						if (!isModal) {
							const divider = document.createElement('li');
							divider.innerHTML = '<hr class="dropdown-divider">';
							const link = document.createElement('a');
							link.href = "{{ path('notification_index') }}";
							link.className = "dropdown-item text-center";
							link.textContent = "Voir toutes les notifications";

							containerElement.appendChild(divider);
							containerElement.appendChild(link);
						}
					});
				};

				// Mettre Ã  jour le compteur au chargement de la page
				updateUnreadCount();

				// Charger les notifications quand on ouvre la modale (version mobile)
				if (notificationModal) {
					notificationModal.addEventListener('show.bs.modal', function () {
						loadRecentNotifications(notificationModalBody, true);
					});
				}

				// Charger les notifications quand on clique sur la cloche desktop
				const notificationDropdownDesktop = document.getElementById('notificationDropdownDesktop');
				if (notificationDropdownDesktop) {
					notificationDropdownDesktop.addEventListener('show.bs.dropdown', function () {
						loadRecentNotifications(notificationListElDesktop);
					});
				}

				// Optionnel : Mettre Ã  jour le compteur toutes les minutes
				setInterval(updateUnreadCount, 60000);
			});
		</script>
	{% endblock %}
</body>
</html>