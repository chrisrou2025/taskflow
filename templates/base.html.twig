<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>
			{% block title %}TaskFlow - Gestion de tÃ¢ches collaboratives
			{% endblock %}
		</title>
		<link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>ðŸ“‹</text></svg>">

		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
		<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">

		{% block stylesheets %}
			<link rel="stylesheet" href="{{ asset('styles/app.css') }}">
		{% endblock %}
	</head>

	<body>
		<nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top">
			<div class="container-fluid">
				<div class="d-flex d-lg-none navbar-header-mobile">
					<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
						<span class="navbar-toggler-icon"></span>
					</button>

					<a class="navbar-brand" href="{{ path('app_home') }}">
						ðŸ“‹ TaskFlow
					</a>

					{% if app.user %}
						<div class="navbar-toggler-notifications">
							<button class="notification-bell-btn" type="button" data-bs-toggle="modal" data-bs-target="#notificationModal">
								<span class="notification-icon-wrapper">
									<i class="fas fa-bell"></i>
									<span class="badge bg-danger notification-badge" id="notification-count"></span>
								</span>
							</button>
						</div>
					{% endif %}
				</div>

				<div class="collapse navbar-collapse" id="navbarNav">
					<ul class="navbar-nav me-auto">
						<li class="nav-item d-lg-block d-none">
							<a class="navbar-brand" href="{{ path('app_home') }}">
								ðŸ“‹ TaskFlow
							</a>
						</li>

						{% if app.user %}
							<li class="nav-item d-lg-none"><hr class="dropdown-divider"></li>
							<li class="nav-item">
								<a class="nav-link" href="{{ path('app_dashboard') }}">
									<i class="fas fa-tachometer-alt"></i>
									Tableau de bord
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="{{ path('project_index') }}">
									<i class="fas fa-folder"></i>
									Mes Projets
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="{{ path('task_index') }}">
									<i class="fas fa-tasks"></i>
									Mes TÃ¢ches
								</a>
							</li>

							<li class="nav-item d-lg-none"><hr class="dropdown-divider"></li>
							<li class="nav-item d-lg-none">
								<a class="nav-link" href="{{ path('user_profile') }}">
									<i class="fas fa-user-edit"></i>
									Mon Profil
								</a>
							</li>
							{% if is_granted('ROLE_ADMIN') %}
								<li class="nav-item d-lg-none">
									<a class="nav-link" href="{{ path('admin_dashboard') }}">
										<i class="fas fa-cogs"></i>
										Administration
									</a>
								</li>
							{% endif %}
							<li class="nav-item d-lg-none">
								<a class="nav-link" href="{{ path('app_logout') }}">
									<i class="fas fa-sign-out-alt"></i>
									DÃ©connexion
								</a>
							</li>
						{% else %}
							<li class="nav-item d-lg-none"><hr class="dropdown-divider"></li>
							<li class="nav-item d-lg-none">
								<a class="nav-link" href="{{ path('app_login') }}">
									<i class="fas fa-sign-in-alt"></i>
									Connexion
								</a>
							</li>
							<li class="nav-item d-lg-none">
								<a class="nav-link" href="{{ path('app_register') }}">
									<i class="fas fa-user-plus"></i>
									Inscription
								</a>
							</li>
						{% endif %}
					</ul>

					<ul class="navbar-nav align-items-center">
						{% if app.user %}
							<li class="nav-item d-none d-lg-block">
								<a class="nav-link" href="{{ path('user_profile') }}">
									<i class="fas fa-user-edit"></i>
									Mon Profil
								</a>
							</li>
							{% if is_granted('ROLE_ADMIN') %}
								<li class="nav-item d-none d-lg-block">
									<a class="nav-link" href="{{ path('admin_dashboard') }}">
										<i class="fas fa-cogs"></i>
										Administration
									</a>
								</li>
							{% endif %}

							{# ðŸ”” Notifications desktop visibles uniquement connectÃ© #}
							<li class="nav-item dropdown d-none d-lg-block notification-desktop">
								<a class="nav-link" href="#" id="notificationDropdownDesktop" role="button" data-bs-toggle="dropdown" aria-expanded="false">
									<span class="notification-icon-wrapper">
										<i class="fas fa-bell"></i>
										<span class="badge bg-danger notification-badge" id="notification-count-desktop"></span>
									</span>
									Notifications
								</a>
								<ul class="dropdown-menu dropdown-menu-end notification-dropdown" id="notification-list-desktop" aria-labelledby="notificationDropdownDesktop"></ul>
							</li>

							<li class="nav-item d-none d-lg-block">
								<a class="nav-link" href="{{ path('app_logout') }}">
									<i class="fas fa-sign-out-alt"></i>
									DÃ©connexion
								</a>
							</li>
						{% else %}
							<li class="nav-item d-none d-lg-block">
								<a class="nav-link" href="{{ path('app_login') }}">
									<i class="fas fa-sign-in-alt"></i>
									Connexion
								</a>
							</li>
							<li class="nav-item d-none d-lg-block">
								<a class="nav-link" href="{{ path('app_register') }}">
									<i class="fas fa-user-plus"></i>
									Inscription
								</a>
							</li>
						{% endif %}
					</ul>
				</div>
			</div>
		</nav>

		<div class="main-content">
			<div class="container-fluid py-4">
				{% for type, messages in app.flashes %}
					{% for message in messages %}
						<div class="alert alert-{{ type == 'error' ? 'danger' : type }} alert-dismissible fade show" role="alert">
							<i class="fas fa-{{ type == 'success' ? 'check-circle' : (type == 'error' ? 'exclamation-triangle' : 'info-circle') }}"></i>
							{{ message }}
							<button type="button" class="btn-close" data-bs-dismiss="alert"></button>
						</div>
					{% endfor %}
				{% endfor %}

				{% block body %}{% endblock %}
			</div>
		</div>

		<footer class="mt-5 py-4 text-center text-muted">
			<div class="container">
				<div class="row">
					<div class="col-md-6">
						<p>&copy;
							{{ 'now'|date('Y') }}
							TaskFlow - Application de gestion de tÃ¢ches</p>
					</div>
					<div class="col-md-6">
						<div class="d-flex justify-content-center gap-3">
							<a href="{{ path('legal_terms') }}" class="text-muted text-decoration-none">CGU</a>
							<a href="{{ path('legal_privacy') }}" class="text-muted text-decoration-none">ConfidentialitÃ©</a>
							<a href="{{ path('legal_gdpr') }}" class="text-muted text-decoration-none">RGPD</a>
							<a href="{{ path('legal_cookies') }}" class="text-muted text-decoration-none">Cookies</a>
						</div>
					</div>
				</div>
				<small>DÃ©veloppÃ© avec Symfony</small>
			</div>
		</footer>

		{% if app.user %}
			<div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
				<div class="modal-dialog modal-dialog-centered">
					<div class="modal-content">
						<div class="modal-header">
							<h5 class="modal-title" id="notificationModalLabel">Mes Notifications</h5>
							<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
						</div>
						<div class="modal-body"></div>
						<div class="modal-footer">
							<a href="{{ path('notification_index') }}" class="btn btn-outline-primary w-100">
								Voir toutes les notifications
							</a>
						</div>
					</div>
				</div>
			</div>
		{% endif %}

		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

		{% block javascripts %}
			{% if app.user %}
				<script>
					document.addEventListener('DOMContentLoaded', function () {
						// Ã‰lÃ©ments DOM
						const notificationCountEl = document.getElementById('notification-count');
						const notificationCountElDesktop = document.getElementById('notification-count-desktop');
						const notificationListElDesktop = document.getElementById('notification-list-desktop');
						const notificationModal = document.getElementById('notificationModal');
						const notificationModalBody = document.querySelector('#notificationModal .modal-body');

						// URLs des API
						const unreadCountUrl = "{{ path('api_notification_unread_count') }}";
						const recentNotificationsUrl = "{{ path('api_notification_recent') }}?limit=5";

						// Variables pour gÃ©rer les intervalles et la visibilitÃ©
						let updateInterval = null;
						let isDocumentVisible = !document.hidden;

						// Fonction utilitaire : parse JSON avec gestion d'erreurs
						async function safeJson(response) {
							try {
								return await response.json();
							} catch (error) {
								console.warn("RÃ©ponse non JSON reÃ§ue :", error.message);
								return null;
							}
						}

						// Fonction utilitaire : gestion des erreurs rÃ©seau
						function handleNetworkError(error) {
							// Ã‰viter le spam d'erreurs dans la console pour les erreurs courantes
							if (error.name !== 'AbortError' && !error.message.includes('NetworkError')) {
								console.warn('Erreur rÃ©seau notifications:', error.message);
							}
						}

						// Masquer les badges de notifications
						function hideNotificationBadges() {
							if (notificationCountEl) {
								notificationCountEl.style.display = 'none';
							}
							if (notificationCountElDesktop) {
								notificationCountElDesktop.style.display = 'none';
							}
						}

						// Mettre Ã  jour les badges de notifications
						function updateNotificationBadges(count) {
							if (count > 0) {
								if (notificationCountEl) {
									notificationCountEl.innerText = count;
									notificationCountEl.style.display = 'flex';
								}
								if (notificationCountElDesktop) {
									notificationCountElDesktop.innerText = count;
									notificationCountElDesktop.style.display = 'flex';
								}
							} else {
								hideNotificationBadges();
							}
						}

						// Met Ã  jour le compteur de notifications avec timeout et contrÃ´le d'abandon
						const updateUnreadCount = () => {
							const controller = new AbortController();
							const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 secondes

							fetch(unreadCountUrl, {
								headers: {
									'Accept': 'application/json'
								},
								signal: controller.signal
							})
							.then(response => {
								clearTimeout(timeoutId);
								if (!response.ok) {
									throw new Error(`HTTP ${response.status}`);
								}
								return safeJson(response);
							})
							.then(data => {
								if (!data || typeof data.count === 'undefined') {
									hideNotificationBadges();
									return;
								}
								updateNotificationBadges(data.count);
							})
							.catch(handleNetworkError);
						};

						// Charge les notifications rÃ©centes avec timeout
						const loadRecentNotifications = (containerElement, isModal = false) => {
							containerElement.innerHTML = '<p class="text-center text-muted my-4">Chargement...</p>';
							
							const controller = new AbortController();
							const timeoutId = setTimeout(() => controller.abort(), 8000); // 8 secondes

							fetch(recentNotificationsUrl, {
								headers: {
									'Accept': 'application/json'
								},
								signal: controller.signal
							})
							.then(response => {
								clearTimeout(timeoutId);
								if (!response.ok) {
									throw new Error(`HTTP ${response.status}`);
								}
								return safeJson(response);
							})
							.then(data => {
								containerElement.innerHTML = '';

								if (!data) {
									containerElement.innerHTML = '<p class="text-center text-warning my-4">DonnÃ©es temporairement indisponibles</p>';
									return;
								}

								if (data.length === 0) {
									containerElement.innerHTML = '<p class="text-center text-muted my-4">Aucune nouvelle notification</p>';
								} else {
									const listGroup = document.createElement('div');
									listGroup.className = isModal ? 'list-group list-group-flush' : 'list-group';

									data.forEach(notif => {
										const item = document.createElement('a');
										item.href = notif.read_url || "#";
										item.className = 'list-group-item list-group-item-action d-flex align-items-start notification-item';
										if (!notif.is_read) {
											item.classList.add('unread');
										}

										// SÃ©curisation des donnÃ©es avec valeurs par dÃ©faut
										item.innerHTML = `
											<i class="${notif.icon || 'fas fa-bell'} ${notif.color_class || 'text-primary'} mt-1 me-3"></i>
											<div>
												<div class="small">${notif.message || 'Notification'}</div>
												<small class="text-muted">${notif.time_ago || 'Ã€ l\'instant'}</small>
											</div>
										`;
										listGroup.appendChild(item);
									});
									containerElement.appendChild(listGroup);
								}

								// Ajout du lien "Voir toutes" pour le dropdown desktop
								if (!isModal) {
									const divider = document.createElement('li');
									divider.innerHTML = '<hr class="dropdown-divider">';
									const linkContainer = document.createElement('li');
									const link = document.createElement('a');
									link.href = "{{ path('notification_index') }}";
									link.className = "dropdown-item text-center";
									link.textContent = "Voir toutes les notifications";
									linkContainer.appendChild(link);

									containerElement.appendChild(divider);
									containerElement.appendChild(linkContainer);
								}
							})
							.catch(error => {
								handleNetworkError(error);
								containerElement.innerHTML = '<p class="text-center text-warning my-4">Connexion temporairement indisponible</p>';
							});
						};

						// Gestion de la visibilitÃ© du document pour optimiser les performances
						function handleVisibilityChange() {
							isDocumentVisible = !document.hidden;
							
							if (isDocumentVisible) {
								// Reprendre les mises Ã  jour quand l'onglet redevient visible
								if (!updateInterval) {
									updateUnreadCount(); // Mise Ã  jour immÃ©diate
									updateInterval = setInterval(updateUnreadCount, 120000); // 2 minutes
								}
							} else {
								// ArrÃªter les mises Ã  jour quand l'onglet n'est plus visible
								if (updateInterval) {
									clearInterval(updateInterval);
									updateInterval = null;
								}
							}
						}

						// Ã‰couteurs d'Ã©vÃ©nements
						document.addEventListener('visibilitychange', handleVisibilityChange);

						// Ã‰vÃ©nement pour le modal mobile
						if (notificationModal) {
							notificationModal.addEventListener('show.bs.modal', function () {
								loadRecentNotifications(notificationModalBody, true);
							});
						}

						// Ã‰vÃ©nement pour le dropdown desktop
						const notificationDropdownDesktop = document.getElementById('notificationDropdownDesktop');
						if (notificationDropdownDesktop) {
							notificationDropdownDesktop.addEventListener('show.bs.dropdown', function () {
								loadRecentNotifications(notificationListElDesktop, false);
							});
						}

						// Chargement initial des notifications
						updateUnreadCount();

						// DÃ©marrer l'intervalle de mise Ã  jour si le document est visible
						if (isDocumentVisible) {
							updateInterval = setInterval(updateUnreadCount, 120000); // 2 minutes
						}

						// Nettoyage des ressources Ã  la fermeture de la page
						window.addEventListener('beforeunload', function() {
							if (updateInterval) {
								clearInterval(updateInterval);
								updateInterval = null;
							}
						});
					});
				</script>
			{% endif %}
		{% endblock %}

	</body>
</html>